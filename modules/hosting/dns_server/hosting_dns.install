<?php
// $Id: hosting_dns.install,v 1.7 2009/04/16 01:46:52 adrian Exp $

/**
 * Implementation of hook_schema().
 */
function hosting_dns_schema() {
  $schema['hosting_dns_server'] = array(
    'description' => t('Fields specific to the DNS server content type. Mostly defaults for the zonefiles created in this server.'),
    'fields' => array(
      'vid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,),
      'nid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,),
      'engine' => array('type' => 'text', 'size' => 'medium', 'not null' => TRUE,),
      'default_ip' => array('type' => 'text', 'size' => 'small', 'not null' => TRUE,),
      'ns' => array('type' => 'text', 'size' => 'big', 'not null' => TRUE,),
      'mbox' => array('type' => 'text', 'size' => 'big', 'not null' => TRUE,),
      'refresh' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 7200,),
      'retry' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 300,),
      'expire' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 604800,),
      'minimum' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 86400,),
      'ttl' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 86400,),
      'xfer' => array('type' => 'text', 'size' => 'big', 'not null' => TRUE,),
    ),
    'primary key' => array('vid'),
  );

  $schema['hosting_dns_server_config'] = array(
    'description' => t('Keep track of "per-engine" configuration details, specific to the particular backend (BIND, myDNS, etc)'),
    'fields' => array(
      'vid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,),
      'nid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,),
      'engine' => array('type' => 'text', 'size' => 'medium', 'not null' => TRUE,),
      'data' => array('type' => 'text', 'size' => 'big', 'not null' => TRUE,),
    ),
    'primary key' => array('vid'),
  );

  $schema['hosting_dns_server_zone'] = array(
    'description' => t('Map DNS server nodes onto zone IDs'),
    'fields' => array(
      'sid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => t('nid of the dns server node')),
      'zid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => t('nid of the zone node')),
    ),
    'primary key' => array('sid', 'zid'),
  );

  $schema['hosting_dns_soa'] = array(
    'description' => t('Storage of individual DNS zone details, compatible with MyDNS (because it uses RFC1537 standard field names).'),
    'fields' => array(
      'zid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => t('The zone ID. Maps to the nid of the zone in the node table.')),
      'vid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => t('Revision number of this zone, if revisions are enabled, otherwise equal to the zid')),
      'origin' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'char',
        'length' => '255',
        'not null' => TRUE,
      ),
      'mbox' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'char',
        'length' => '255',
        'not null' => TRUE,
      ),
      'serial' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'refresh' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 28800,
      ),
      'retry' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 7200,
      ),
      'expire' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 604800,
      ),
      'minimum' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 86400,
      ),
      'ttl' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 86400,
      ),
      'xfer' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'char',
        'length' => '255',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('zid','vid'),
    'unique keys' => array(
      'vid' => array('vid'),
      'origin' => array('origin')
    ),
    'indexes' => array(
      'zid' => array('zid')
    ),
  );
  $schema['hosting_dns_rr'] = array(
    'description' => t('Storage of records associated with zones, compatible with MyDNS (because it uses RFC1537 standard field names).'),
    'fields' => array(
      'rid' => array(
        'description' => t('Unique identifier for this record'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'zid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => t('The ID of the zone this record belongs to')),
      'vid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => t('The version of the zone this record belongs to, if revisions are active (otherwise = zid)')),
      'name' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'char',
        'length' => '64',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'char',
        'length' => '64',
        'not null' => FALSE,
        'default' => 'A',
      ),
      'data' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'char',
        'length' => '128',
        'not null' => TRUE,
      ),
      'aux' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'ttl' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('rid'),
    'unique keys' => array(
      'rr' => array('zid', 'name', 'type', 'data')
    ),
  );
  return $schema;
}

function hosting_dns_install() {
  return drupal_install_schema('hosting_dns');
}

function hosting_dns_uninstall() {
  db_query("DROP TABLE {hosting_dns_server}");
  db_query("DROP TABLE {hosting_dns_server_config}");
  db_query("DROP TABLE {hosting_dns_server_zone}");
  db_query("DROP TABLE {hosting_dns_soa}"); // Should we tell the engine to remove these first?
  db_query("DROP TABLE {hosting_dns_rr}"); 
}
