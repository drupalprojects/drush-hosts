<?php
/**
 * @file DNS server node type is defined here.
 *
 * This is primarily a node module that implements the "front end" of the DNS
 * feature of the Aegir system.  Its role is to allow the admin to setup
 * DNS-related settings and defaults for provisioning new sites.  The
 * corresponding provision_dns.module in the provision project complements this
 * by implementing the drush-driven tasks that constitute the "backend" of the
 * system.
 */

include_once(drupal_get_path('module', 'hosting_dns') . '/hosting_dns.admin.inc');
include_once(drupal_get_path('module', 'hosting_dns') . '/hosting_dns.api.inc');

function hosting_dns_init() {
  define('HOSTING_DEFAULT_DNS_SERVER', variable_get('hosting_default_dns_server', null));
}

/**
 * Implementation of hook_hosting_service()
 *
 * @see hosting_help_requirements()
 */
function hosting_dns_hosting_service() {
  return array( "dns" => array(
    'title' => t("DNS server"),
    'type' => 'Bind', 
    'class' => 'hostingService_DNS',
    'module' => 'hosting_dns',
    'file' => 'hosting_dns.service.inc',
  ));
}

function hosting_dns_help($section) {
  switch ($section) {
    case 'admin/help/provision#requirements':
      $output .= _hosting_requirements('config_dns_path');
      $output .= _hosting_requirements('visudo_dns');
      return $output;
      break;
    case 'dns_server' :
      return t("<strong>The DNS server which defines sites and their domains.</strong>
                Most sites will have a primary and secondary DNS server, at least one of which is usually 
		remote from the server on which the site actually resides.");
      break;
  }
}

/**
 * implementation of hook_hosting_tasks
 */
function hosting_dns_hosting_tasks() {
  $options = array();
  $options['zone']['zone-verify'] = array('title' => t('Verify'), 'description' => t('This will create or regenerate the complete zonefile from the information in the database.'), 'weight' => 1);
  $options['zone']['zone-delete'] = array('title' => t('Delete'), 'description' => t('This will delete the zone and all associated records.'), 'weight' => 3);
  return $options;
}
 
/**
 * Implementation of hook_menu().
 */
function hosting_dns_menu() {
# provide engine-specific settings here, depending on the types of the DNS nodes in the system..
    $items['admin/hosting/dns'] = array(
      'title' => t('DNS'),
      'description' => t('Manually administer DNS zones and records'),
      'page callback' => 'hosting_dns_admin',
      'access arguments' => array('administer DNS provisioning'),
      'type' => MENU_LOCAL_TASK
    );
    $items['admin/hosting/dns/list'] = array(
      'title' => t('List Zones'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -1,
    );
    $items['admin/hosting/dns/configure'] = array(
      'title' => t('Configure'),
      'type' => MENU_LOCAL_TASK,
      'description' => t('Configure DNS Provisioning'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('hosting_dns_settings'),
      'access arguments' => array('administer DNS provisioning'),
      'weight' => 10,
    );

    $items['admin/hosting/dns/add'] = array(
        'title' => 'Add Zone',
        //'title callback' => 'check_plain',
        'page callback' => 'node_add',
        'page arguments' => array('zone'),
        'access callback' => TRUE,
        'weight' => 1,
        'access callback' => 'node_access',
        'access arguments' => array('create', 'zone'),
        'description' => t('blablabla'),
        'type' => MENU_LOCAL_TASK,
        );

    $items['node/%node/records'] = array(
      'title' => t('Zone Records'),
      'page callback' => 'hosting_dns_records',
      'page arguments' => array(1),
      'access arguments' => array('access administration pages'),
      'type' => MENU_LOCAL_TASK,
    );

    $items['node/%node/delete'] = array(
      'title' => t('Delete Zone'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('hosting_dns_zone_delete_confirm', 1),
      'access arguments' => array('access administration pages'),
      'type' => MENU_CALLBACK,
    );

    $items['node/%node/records/list'] = array(
      'title' => t('List Zone Records'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'access arguments' => array('access administration pages'),
      'weight' => -10,
    );
    $items['node/%node/records/add'] = array(
      'title' => t('Add Zone Record'),
      'description' => t('Add a new DNS zone record (subdomain) to the system'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('hosting_dns_record_form', 1), 
      'access arguments' => array('access administration pages'),
      'type' => MENU_LOCAL_TASK,
    );
    $items['node/%node/records/%'] = array(
      'title' => t('Edit Zone Record'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('hosting_dns_record_form', 1, 3),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access administration pages'),
    );

    $items['node/%node/records/%/delete'] = array(
      'title' => t('Delete Zone Record'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('hosting_dns_record_delete_confirm', 1, 3),
      'access arguments' => array('access administration pages'),
      'type' => MENU_CALLBACK,
    );
  return $items;
}

/**
 * Menu callback: general settings for DNS provisioning
 *
 * Allow the admin to define a set of TLDs which are valid for this platform. These are used when spl
itting
 */
function hosting_dns_settings() {
  $form['hosting_dns_tlds'] = array(
    '#type' => 'textarea',
    '#title' => t('Supported Top Level Domains'),
    '#description' => t('TLDs which this Aegir site can install. Used to determine the host and zone 
parts of the FQDN when provisioning sites. Enter one TLD (.com, .net, .co.uk, .net.au) per line.'),
    '#default_value' => variable_get('hosting_dns_tlds', ''),
  );
  return system_settings_form($form);
}


function _hosting_config_dns_path_requirements() {
  $username = HOSTING_DEFAULT_SCRIPT_USER;
  $group = HOSTING_DEFAULT_WEB_GROUP;
  $path = HOSTING_DEFAULT_CONFIG_PATH;
  $mkdir_cmd['@named_path'] = $path;
  $mkdir_cmd['@provision_link'] = url('admin/settings/provision');
  $mkdir_cmd['@mkdir_cmd'] = <<<EOF
    mkdir -p $path
    chown $username:$username $path
    chmod 0700 $path
EOF;

  $help['title'] = t('Write access to a directory to store configuration information');
  $help['summary'] = t('The Provision framework takes special care to make sure that the file permissions of the 
                        hosted sites are always as safe as can be, especially to make sure that the web server does 
			not have the ability to modify the code of the site, therefore this information is required 
			to assure that safety while keeping the sites accessible. 
			The recommended path is directly above your platform path, but it can be anywhere.');
  
  $help['configuration'][] = t('Based on your server configuration we have determined that your path should be <code>@named_path</code>,
  but you can change it in the <a href="@provision_link">provision_section</a>', $mkdir_cmd);
  $help['configuration'][] = t('Please enter the following commands : <pre>@mkdir_cmd</pre>', $mkdir_cmd);

  return $help;
}

function _hosting_visudo_dns_requirements() {
#  $username = HOSTING_DEFAULT_SCRIPT_USER;
#  $cmd = trim(str_replace("sudo", '', HOSTING_DEFAULT_RESTART_CMD));
#  $cmd = substr($cmd, 0, strpos($cmd, " "));
#  $visudo['@visudo_cmd'] = <<<EOF
#    sudo visudo
#EOF;
#  $visudo['@visudo_line'] = <<<EOF
#    $username = ALL=NOPASSWD: $cmd
#EOF;
}


## Not sure if this is necessary (stolen from db_server)
#function hosting_get_dns_server($hostname, $web_server = null) {
#  if (_hosting_valid_ip($hostname)) {
#    $ip = $hostname;
#    $hostname = gethostbyaddr($hostname);
#  } else {
#    $ip = gethostbyname($hostname);
#  }
#  $result = db_result(db_query("SELECT nid FROM {node} WHERE title in ('%s', '%s') and type='dns_server'", $ip, $hostname));
#  if ($result) {
#    return node_load($result);
#  }
#
#  return false;
#}

/**
 * Implementation of hook_node_info
 */
function hosting_dns_node_info() {
  $types["dns_server"] =  array(
    "type" => 'dns_server', "name" => 'DNS server',
    "module" => 'hosting_dns',
    "has_title" => TRUE, "title_label" => t('Host name'), 
    "description" => hosting_dns_help("dns_server"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);    
  $types["zone"] =  array(
    "type" => 'zone', "name" => 'DNS zone',
    "module" => 'hosting_dns',
    "has_title" => TRUE, "title_label" => 'Domain name', 
    "description" => t("A DNS zone file is something really great and you all want one. (TODO: more documentation here)"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);
  return $types;
}


/**
 * Implementation of hook_perm
 */
function hosting_dns_perm() {
  return array('create DNS server','view DNS server', 'edit DNS server', 'delete DNS server', 'administer DNS provisioning');
}

/**
 * Implementation of hook_access
 */
function hosting_dns_access($op, $node) {
  global $user;

  switch($op) {
    case 'create':
      return user_access('create DNS server');
      break;
    case 'view':
      return user_access('view DNS server');
      break;
    case 'update':
      return user_access('edit DNS server');
      break;
    case 'delete':
      return user_access('delete DNS server');
      break;
    default:
      break;
  }
}

/**
 * Small helper function to get DNS servers.
*/ 
function _hosting_get_dns_servers() {
  $return = array();
  $result = db_query("SELECT nid, title FROM {node} WHERE type='dns_server' AND status=1");
  while($server = db_fetch_object($result)) {
    $return[$server->nid] = $server->title;
  }
  return $return;
}


/**
 * Implementation of hook_form().
 */
function hosting_dns_form(&$node) {
  switch ($node->type) { 
  case 'zone':
    $fields = hosting_dns_zone_fields();
    if (!$node->nid) {
      # create a 'default' zone object, with all the right fields set to defaults..
      $node = new stdClass();
      foreach ($fields as $field => $title) {
        $node->$field = variable_get('hosting_dns_'.$field,NULL);
      }
      $node->serial = date('Ymd') . '01';
    }

    foreach ($fields as $field => $title) {
      $form[$field] = array(
          '#type' => 'textfield',
          '#title' => $title,
          '#default_value' => $node->$field,
          );
    }

    break;
  }
  return $form;
}

/**
 * Implementation of hook_insert().
 */
function hosting_dns_insert($node) {
  switch ($node->type) { 
  case 'zone':
    $node->id = $node->nid;
    drupal_write_record('hosting_dns_soa', $node);
    module_invoke_all("hosting_dns_zone", 'add', $node);
    if (isset($args['dns_id'])) { $dns = node_load($args['dns_id']); }
    if ($dns) {  # Add a default A record for the origin
      hosting_dns_rr('add', $node, array('name' => '@', 'type' => 'A', 'data' => $dns->default_ip));
    }
    break;
  }
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function hosting_dns_update($node) {
  switch ($node->type) { 
  case 'zone':
    drupal_write_record('hosting_dns_soa', $node, 'id');
    module_invoke_all("hosting_dns_zone", 'update', $node);
    break;
  }
}

/**
 * Implementation of hook_load().
 */
function hosting_dns_load($node) {
  switch ($node->type) { 
  case 'zone':
    $additions = db_fetch_object(db_query('SELECT origin, mbox, serial, refresh, retry, expire, minimum, ttl, xfer FROM {hosting_dns_soa} WHERE vid = %d', $node->vid));
    $records = array();
    $q = db_query('SELECT id AS rid,name,type,data,aux,ttl FROM {hosting_dns_rr} WHERE zone = %d', $node->nid);
    while ($record = db_fetch_array($q)) {
      $records[$record['rid']] = $record;
    }
    $additions->records = $records;
    break;
  }
  return $additions;
}

function hosting_task_zone_load($node) {
  if (!is_object($node)) {
    $node = node_load($node);
  }
  return $node;
} 

/**
 * Implementation of hook_view().
 */
function hosting_dns_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  switch ($node->type) { 
  case 'zone':
    $node->content['zone'] = array(
     '#type' => 'fieldset',
     '#title' => t('Zone details'),
    );
    $node->content['zone']['#prefix'] = '<div id="hosting-site-info">';
    foreach (hosting_dns_zone_fields() as $field => $title) {
      $node->content['zone'][$field] = array('#type' => 'item', '#title' => $title, '#value' => $node->$field);
    }
  $node->content['zone']['#suffix'] = '</div>';
    if ($node->nid) { 
      $node->content['tasks_view'] = array(
        '#type' => 'item',
        '#value' => hosting_task_table($node),
        '#prefix' => '<div id="hosting-task-list">',
        '#suffix' => '</div>', 
        '#weight' => 10
      );
    }
    break;
  }
   
  return $node;
}

function hosting_dns_zone_fields() {
  return array('origin' => t('Origin'), 'mbox' => t('Admin Email'), 'serial' => t('Serial'), 'refresh' => t('Refresh'), 'retry' => t('Retry'), 'expire' => t('Expire'), 'minimum' => t('Minimum TTL'), 'ttl' => t('Default TTL'), 'xfer' => t('XFER Access list'));
}

/**
 * Implementation of hook_hosting_summary.
 *
 * Provides a list of existing DNS servers for the hosting summary block.
 */
function hosting_dns_hosting_summary() {
  $summary = array();
  $dns_servers = _hosting_get_dns_servers();
  $summary['dns_servers'] = theme('item_list', array_map('_hosting_node_link', array_keys($dns_servers)), t('DNS Servers'));
  return $summary;
}

/**
 * Implementation of hook_form_alter.
 *
 * Add a radio button field to select a DNS server on platforms. This field is
 * hidden if only one DNS server is available.
 * Also adds a select field to site nodes to determine the primary DNS server for the site.
 */
function hosting_dns_form_alter($form_id, &$form) {
  if ($form_id == 'site_node_form') {
    $form['dns_server'] = array(
      '#type' => 'select',
      '#title' => t('DNS Server'),
      '#description' => t('Select a primary DNS server on which to provision this site\'s domain.'),
      '#options' => _hosting_get_dns_servers(),
      '#default_value' => $form['#node']->dns_server,
    );
  }
}

function hosting_dns_site_insert($node) {
  $dns = node_load($node->dns_server);
drupal_set_message("loaded DNS server node ".$dns->title." for new site node ".$node->title);
  $zone = hosting_dns_create_zone($node->title, $dns);   # initialize zone for this domain 
  $data['type'] = 'A';
  $data['dns_ip'] = $dns->default_ip;
  hosting_dns_create_record('www', $zone, $data);    # creates the RR for the (sub)domain
}


/**
 * Implementation of hook_nodeapi
 * 
 * Validate site URLs to ensure they fall within a valid TLD.
 * Also manage inserts, updates, and deletions of DNS servers when platform nodes change.
 */
function hosting_dns_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'site') {
    switch($op) {
      case 'insert':
        # create the zone, if necessary
        # add the RR
        # create the node association:
        #db_query("INSERT INTO {hosting_dns_server_zone} (vid,nid,nid,rid)" 
        # should also track the site node ID mapped to the zone/record id..
        drupal_set_message("site node inserted: creating zone/RR records for ".$node->title);
        hosting_dns_site_insert($node);

        break;
      case 'update':
        # update the node, or insert it, if it doesn't already exist..
        # This will never happen? 
        # hosting_dns_site_update($node);
        break;
      case 'delete':
        # remove the RR (which triggers removal of the zone, if empty)
        hosting_dns_site_delete($node);
        break;
      case 'delete revision':
        hosting_dns_site_delete_revision($node);
        break;
      case 'validate': # This one gets $a3 as $form
        # check the form of the site name for url-ness
        break;
      case 'load':
        # add the $zone object and $rid to the $node
#       $additions['dns_server'] = hosting_dns_get_
        if (user_access('administer DNS provisioning')) {
drupal_set_message("loading DNS info for site: ".$node->title);
          $data = _hosting_dns_split_url($node->title);
          $zid = _hosting_dns_get_zid($data['zone']);
          $additions['zone'] = hosting_dns_status('zone', array('zid' => $zid));
          $additions['rr'] = hosting_dns_status('rr', array('zid' => $zid, 'name' => $data['host'], 'type' => 'A'));
          return $additions;
        }
        break;
      case 'view': # This one gets $a3 = $teaser, and $a4 = $path
        if (user_access('administer DNS provisioning')) {
          # show the zone/rr details?
          
          $node->content['info']['zone'] = array(
            '#type' => 'item',
            '#title' => t('Zone'),
            '#weight' => 21,
            '#value' => $node->zone->origin . " (zid:".$node->zone->nid.")",
          );
          $node->content['info']['record'] = array(
            '#type' => 'item',
            '#title' => t('Resource Record'),
            '#weight' => 22,
            '#value' => $node->rr->name . " (type:".$node->rr->type.")",
          );

        }
        break;
    }
  }
#  if ($op == 'validate' && $node->type == 'site') {
#    $tlds = split("\n", variable_get('provision_dns_tlds', ''));
#    $matched_tld = FALSE;
#    foreach ($tlds as $tld) {
#      $tld = trim($tld);
#      $pat = "/".$tld."$/";
#      if (preg_match($pat, $node->title)) {
#        $matched_tld = TRUE;
#        break;
#      }
#    }
#    if (!$matched_tld) {
#      form_set_error('title', t("The URL you have provided is not within a valid Top-Level Domain to be provisioned."));
#    }
#  }
}
